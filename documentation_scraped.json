[
  {
    "title": "Installation",
    "url": "https://react.dev/learn/installation",
    "source": "react",
    "sections": [
      {
        "content": [
          {
            "Info": "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.",
            "links": [
              {
                "Sub-Topic": "How to start a new React project",
                "link": "https://react.dev/learn/start-a-new-react-project"
              },
              {
                "Sub-Topic": "How to add React to an existing project",
                "link": "https://react.dev/learn/add-react-to-an-existing-project"
              },
              {
                "Sub-Topic": "How to set up your editor",
                "link": "https://react.dev/learn/editor-setup"
              },
              {
                "Sub-Topic": "How to install React Developer Tools",
                "link": "https://react.dev/learn/react-developer-tools"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Describing the UI",
    "url": "https://react.dev/learn/describing-the-ui",
    "source": "react",
    "sections": [
      {
        "content": [
          {
            "Info": "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestablecomponents.From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.",
            "links": [
              {
                "Sub-Topic": "How to write your first React component",
                "link": "https://react.dev/learn/your-first-component"
              },
              {
                "Sub-Topic": "When and how to create multi-component files",
                "link": "https://react.dev/learn/importing-and-exporting-components"
              },
              {
                "Sub-Topic": "How to add markup to JavaScript with JSX",
                "link": "https://react.dev/learn/writing-markup-with-jsx"
              },
              {
                "Sub-Topic": "How to use curly braces with JSX to access JavaScript functionality from your components",
                "link": "https://react.dev/learn/javascript-in-jsx-with-curly-braces"
              },
              {
                "Sub-Topic": "How to configure components with props",
                "link": "https://react.dev/learn/passing-props-to-a-component"
              },
              {
                "Sub-Topic": "How to conditionally render components",
                "link": "https://react.dev/learn/conditional-rendering"
              },
              {
                "Sub-Topic": "How to render multiple components at a time",
                "link": "https://react.dev/learn/rendering-lists"
              },
              {
                "Sub-Topic": "How to avoid confusing bugs by keeping components pure",
                "link": "https://react.dev/learn/keeping-components-pure"
              },
              {
                "Sub-Topic": "Why understanding your UI as trees is useful",
                "link": "https://react.dev/learn/understanding-your-ui-as-a-tree"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Adding Interactivity",
    "url": "https://react.dev/learn/adding-interactivity",
    "source": "react",
    "sections": [
      {
        "content": [
          {
            "Info": "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is calledstate.You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.",
            "links": [
              {
                "Sub-Topic": "How to handle user-initiated events",
                "link": "https://react.dev/learn/responding-to-events"
              },
              {
                "Sub-Topic": "How to make components “remember” information with state",
                "link": "https://react.dev/learn/state-a-components-memory"
              },
              {
                "Sub-Topic": "How React updates the UI in two phases",
                "link": "https://react.dev/learn/render-and-commit"
              },
              {
                "Sub-Topic": "Why state doesn’t update right after you change it",
                "link": "https://react.dev/learn/state-as-a-snapshot"
              },
              {
                "Sub-Topic": "How to queue multiple state updates",
                "link": "https://react.dev/learn/queueing-a-series-of-state-updates"
              },
              {
                "Sub-Topic": "How to update an object in state",
                "link": "https://react.dev/learn/updating-objects-in-state"
              },
              {
                "Sub-Topic": "How to update an array in state",
                "link": "https://react.dev/learn/updating-arrays-in-state"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Managing State",
    "url": "https://react.dev/learn/managing-state",
    "source": "react",
    "sections": [
      {
        "content": [
          {
            "Info": "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.",
            "links": [
              {
                "Sub-Topic": "How to think about UI changes as state changes",
                "link": "https://react.dev/learn/reacting-to-input-with-state"
              },
              {
                "Sub-Topic": "How to structure state well",
                "link": "https://react.dev/learn/choosing-the-state-structure"
              },
              {
                "Sub-Topic": "How to “lift state up” to share it between components",
                "link": "https://react.dev/learn/sharing-state-between-components"
              },
              {
                "Sub-Topic": "How to control whether the state gets preserved or reset",
                "link": "https://react.dev/learn/preserving-and-resetting-state"
              },
              {
                "Sub-Topic": "How to consolidate complex state logic in a function",
                "link": "https://react.dev/learn/extracting-state-logic-into-a-reducer"
              },
              {
                "Sub-Topic": "How to pass information without “prop drilling”",
                "link": "https://react.dev/learn/passing-data-deeply-with-context"
              },
              {
                "Sub-Topic": "How to scale state management as your app grows",
                "link": "https://react.dev/learn/scaling-up-with-reducer-and-context"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Escape Hatches",
    "url": "https://react.dev/learn/escape-hatches",
    "source": "react",
    "sections": [
      {
        "content": [
          {
            "Info": "Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.",
            "links": [
              {
                "Sub-Topic": "How to “remember” information without re-rendering",
                "link": "https://react.dev/learn/referencing-values-with-refs"
              },
              {
                "Sub-Topic": "How to access DOM elements managed by React",
                "link": "https://react.dev/learn/manipulating-the-dom-with-refs"
              },
              {
                "Sub-Topic": "How to synchronize components with external systems",
                "link": "https://react.dev/learn/synchronizing-with-effects"
              },
              {
                "Sub-Topic": "How to remove unnecessary Effects from your components",
                "link": "https://react.dev/learn/you-might-not-need-an-effect"
              },
              {
                "Sub-Topic": "How an Effect’s lifecycle is different from a component’s",
                "link": "https://react.dev/learn/lifecycle-of-reactive-effects"
              },
              {
                "Sub-Topic": "How to prevent some values from re-triggering Effects",
                "link": "https://react.dev/learn/separating-events-from-effects"
              },
              {
                "Sub-Topic": "How to make your Effect re-run less often",
                "link": "https://react.dev/learn/removing-effect-dependencies"
              },
              {
                "Sub-Topic": "How to share logic between components",
                "link": "https://react.dev/learn/reusing-logic-with-custom-hooks"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "What is AWS Lambda?",
    "url": "https://docs.aws.amazon.com/lambda/latest/dg/welcome.html",
    "source": "aws_lambda",
    "sections": [
      {
        "content": [
          {
            "Topic": "What is AWS Lambda?",
            "texts": [
              "You can use AWS Lambda to run code without provisioning or managing servers.",
              "Lambda runs your code\n    on a high-availability compute infrastructure and performs all of the administration of the compute resources,\n    including server and operating system maintenance, capacity provisioning and automatic scaling, and\n    logging. With Lambda, all you need to do is supply your code in one of the language runtimes that Lambda supports.",
              "You organize your code into Lambda functions. The Lambda service runs your function only when needed and scales automatically. You only pay for the compute time that you consumeâthere is no charge when your code is not running. For more information, seeAWS Lambda Pricing.",
              "To learn how to buildserverless solutions, check out theServerless Developer Guide."
            ]
          },
          {
            "Sub-topic": "When to use Lambda",
            "texts": [
              "Lambda is an ideal compute service for application scenarios that need to scale up rapidly, and scale down to\n      zero when not in demand. For example, you can use Lambda for:",
              "File processing:Use Amazon Simple Storage Service (Amazon S3) to trigger Lambda data processing in real time after an upload.",
              "Stream processing:Use Lambda and Amazon Kinesis to process real-time streaming data for application activity tracking, transaction order processing, clickstream analysis, data cleansing, log filtering, indexing, social media analysis, Internet of Things (IoT) device data telemetry, and metering.",
              "Web applications:Combine Lambda with other AWS services to build powerful web applications that automatically scale up and down and run in a highly available configuration across multiple data centers.",
              "IoT backends:Build serverless backends using Lambda to handle web, mobile, IoT, and third-party API requests.",
              "Mobile backends:Build backends using Lambda and Amazon API Gateway  to authenticate and process API requests. Use AWS Amplify to easily integrate with your iOS, Android, Web, and React Native frontends.",
              "When using Lambda, you are responsible only for your code. Lambda manages the compute fleet that offers a\n      balance of memory, CPU, network, and other resources to run your code. Because Lambda manages these resources, you\n      cannot log in to compute instances or customize the operating system on provided\n        runtimes. Lambda performs operational and administrative activities on your behalf, including managing\n      capacity, monitoring, and logging your Lambda functions."
            ]
          },
          {
            "Sub-topic": "Key features",
            "texts": [
              "The following key features help you develop Lambda applications that are scalable, secure, and easily\n      extensible:",
              "Use environment variables to adjust your function's behavior without updating code.",
              "Manage the deployment of your functions with versions, so that, for example, a new function can be used for beta testing without affecting users of the stable production version.",
              "Create a container image for a Lambda function by using an AWS provided base image or an alternative base\n            image so that you can reuse your existing container tooling or deploy larger workloads that rely on sizable dependencies, such as machine learning.",
              "Package libraries and other dependencies to reduce the size of deployment archives and makes it faster to deploy your code.",
              "Augment your Lambda functions with tools for monitoring, observability, security, and governance.",
              "Add a dedicated HTTP(S) endpoint to your Lambda function.",
              "Configure your Lambda function URLs to stream response payloads back to clients from Node.js functions, to improve time to first byte (TTFB) performance or to return larger payloads.",
              "Apply fine-grained control over the scaling and responsiveness of your production applications.",
              "Verify that only approved developers publish unaltered, trusted code in your Lambda functions",
              "Create a private network for resources such as databases, cache instances, or internal services.",
              "Configure a function to mount an Amazon Elastic File System (Amazon EFS) to a local directory, so that your function code can access and modify shared resources safely and at high concurrency.",
              "Improve startup performance forJava runtimesby up to 10x at no extra cost, typically with no changes to your function code."
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Example apps",
    "url": "https://docs.aws.amazon.com/lambda/latest/dg/example-apps.html",
    "source": "aws_lambda",
    "sections": [
      {
        "content": [
          {
            "Topic": "Example serverless apps",
            "texts": [
              "The following examples provide function code and \n infrastructure as code (IaC) templates to quickly create and deploy serverless apps that implement some common Lambda uses cases. The \n examples also include code examples and instructions to test the apps after you deploy them.",
              "For each of the example apps, we provide instructions to either create and configure resources manually using the AWS Management Console, or to \n  use the AWS Serverless Application Model to deploy the resources using IaC. Follow the console intructions to learn more about configuring the individual AWS \n  resources for each app, or use to AWS SAM to quickly deploy resources as you would in a production environment.",
              "You can use the provided examples as a basis for your own serverless applications by modifying the provided function code and templates \n  for your own use case.",
              "We're continuing to create new examples, so check back again to find more severless apps for common Lambda use cases."
            ]
          },
          {
            "Sub-topic": "Example apps",
            "texts": [
              "Example serverless file-processing app",
              "Create a serverless app to automatically perform a file-processing task when an object is uploaded to an Amazon S3 bucket. In this \n        example, when a PDF file is uploaded, the app encrypts the file and saves it to another S3 bucket.",
              "Example scheduled cron task app",
              "Create an app to perform a scheduled task using a cron schedule. In this example, the app performs maintenance on a \n        Amazon DynamoDB table by deleting entries more than 12 months old."
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Building with TypeScript",
    "url": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-typescript.html",
    "source": "aws_lambda",
    "sections": [
      {
        "content": [
          {
            "Topic": "Building Lambda functions with TypeScript",
            "texts": [
              "You can use the Node.js runtime to run TypeScript code in AWS Lambda. Because Node.js doesn't run TypeScript code natively, you must first \n    transpile your TypeScript code into JavaScript. Then, use the JavaScript files to deploy your function code to Lambda. Your code runs in an \n    environment that includes the AWS SDK for JavaScript, with credentials from an AWS Identity and Access Management (IAM) role that you manage. To learn more \n    about the SDK versions included with the Node.js runtimes, seeRuntime-included SDK versions.",
              "Lambda supports the following Node.js runtimes.",
              "Node.js 22",
              "nodejs22.x",
              "Amazon Linux 2023",
              "Not scheduled",
              "Not scheduled",
              "Not scheduled",
              "Node.js 20",
              "nodejs20.x",
              "Amazon Linux 2023",
              "Not scheduled",
              "Not scheduled",
              "Not scheduled",
              "Node.js 18",
              "nodejs18.x",
              "Amazon Linux 2",
              "Jul 31, 2025",
              "Sep 1, 2025",
              "Oct 1, 2025"
            ]
          },
          {
            "Sub-topic": "Setting up a TypeScript development environment",
            "texts": [
              "Use a local integrated development environment (IDE), text editor, orAWS Cloud9to write your TypeScript function code. You canât create TypeScript code on the Lambda console.",
              "To transpile your TypeScript code, set up a compiler such asesbuildor Microsoft's TypeScript compiler (tsc) , which is bundled with theTypeScript distribution. You can use theAWS Serverless Application Model (AWS SAM)or theAWS Cloud Development Kit (AWS CDK)to simplify building and deploying TypeScript code. Both tools use esbuild to transpile TypeScript code into JavaScript.",
              "When using esbuild, consider the following:",
              "There are severalTypeScript caveats.",
              "You must configure your TypeScript transpilation settings to match the Node.js runtime that you plan to use. For more information, seeTargetin the esbuild documentation. For an example of atsconfig.jsonfile that demonstrates how to target a specific Node.js version supported by Lambda, refer to theTypeScript GitHub repository.",
              "esbuild doesnât perform type checks. To check types, use thetsccompiler. Runtsc -noEmitor add a\"noEmit\"parameter to yourtsconfig.jsonfile, as shown in the following example. This configurestscto not emit JavaScript files. After checking types, use esbuild to convert the TypeScript files into JavaScript."
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Integrating other services",
    "url": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html",
    "source": "aws_lambda",
    "sections": [
      {
        "content": [
          {
            "Topic": "Invoking Lambda with events from other AWS services",
            "texts": [
              "Some AWS services can directly invoke Lambda functions usingtriggers. These services push events to Lambda, and the function is invoked immediately when the specified event occurs. Triggers are suitable for discrete events and real-time processing. When youcreate a trigger using the Lambda console, the console interacts with the corresponding AWS service to configure the event notification on that service. The trigger is actually stored and managed by the service that generates the events, not by Lambda.",
              "The events are data structured in JSON format. The JSON structure varies depending on the service that\n    generates it and the event type, but they all contain the data that the function needs to process the\n    event.",
              "A function can have multiple triggers. Each trigger acts as a client invoking your function independently, and each event that\n    Lambda passes to your function has data from only one trigger. Lambda converts the event document into an object and passes it to your function handler.",
              "Depending on the service, the event-driven invocation can besynchronousorasynchronous.",
              "For synchronous invocation, the service that generates the event waits for the response from your\n        function. That service defines the data that the function needs to return in the response. The service\n        controls the error strategy, such as whether to retry on errors.",
              "For asynchronous invocation, Lambda queues the event before passing it to your function. When Lambda\n        queues the event, it immediately sends a success response to the service that generated the event. After the\n        function processes the event, Lambda doesnât return a response to the event-generating service."
            ]
          },
          {
            "Sub-topic": "Creating a trigger",
            "texts": [
              "The easiest way to create a trigger is to use the Lambda console. When you create a trigger using the console, Lambda automatically adds the required permissions to the function'sresource-based policy.",
              "Open theFunctions pageof the Lambda console.",
              "Select the function you want to create a trigger for.",
              "In theFunction overviewpane, chooseAdd trigger.",
              "Select the AWS service you want to invoke your function.",
              "Fill out the options in theTrigger configurationpane\n          and chooseAdd. Depending on the AWS service you choose to\n          invoke your function, the trigger configuration options will be different."
            ]
          },
          {
            "Sub-topic": "Services that can invoke Lambda functions",
            "texts": [
              "The following table lists services that can invoke Lambda functions.",
              "Amazon Managed Streaming for Apache Kafka",
              "Event source mapping",
              "Self-managed Apache Kafka",
              "Event source mapping",
              "Amazon API Gateway",
              "Event-driven; synchronous invocation",
              "AWS CloudFormation",
              "Event-driven; asynchronous invocation",
              "Amazon CloudWatch Logs",
              "Event-driven; asynchronous invocation",
              "AWS CodeCommit",
              "Event-driven; asynchronous invocation",
              "AWS CodePipeline",
              "Event-driven; asynchronous invocation",
              "Amazon Cognito",
              "Event-driven; synchronous invocation",
              "AWS Config",
              "Event-driven; asynchronous invocation",
              "Amazon Connect",
              "Event-driven; synchronous invocation",
              "Amazon DynamoDB",
              "Event source mapping",
              "Amazon Elastic File System",
              "Special integration",
              "Elastic Load Balancing (Application Load Balancer)",
              "Event-driven; synchronous invocation",
              "Amazon EventBridge (CloudWatch Events)",
              "Event-driven; asynchronous invocation (event buses), synchronous or asynchronous invocation (pipes and schedules)",
              "AWS IoT",
              "Event-driven; asynchronous invocation",
              "Amazon Kinesis",
              "Event source mapping",
              "Amazon Data Firehose",
              "Event-driven; synchronous invocation",
              "Amazon Lex",
              "Event-driven; synchronous invocation",
              "Amazon MQ",
              "Event source mapping",
              "Amazon Simple Email Service",
              "Event-driven; asynchronous invocation",
              "Amazon Simple Notification Service",
              "Event-driven; asynchronous invocation",
              "Amazon Simple Queue Service",
              "Event source mapping",
              "Amazon Simple Storage Service (Amazon S3)",
              "Event-driven; asynchronous invocation",
              "Amazon Simple Storage Service Batch",
              "Event-driven; synchronous invocation",
              "Secrets Manager",
              "Special integration",
              "AWS Step Functions",
              "Event-driven; synchronous or asynchronous invocation",
              "Amazon VPC Lattice",
              "Event-driven; synchronous invocation",
              "AWS X-Ray",
              "Special integration"
            ]
          }
        ]
      }
    ]
  },
  {
    "title": "Code examples",
    "url": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples.html",
    "source": "aws_lambda",
    "sections": [
      {
        "content": [
          {
            "Topic": "Code examples for Lambda using AWS SDKs",
            "texts": [
              "The following code examples show how to use Lambda with an AWS software development kit (SDK).",
              "Basicsare code examples that show you how to perform the essential operations within a service.",
              "Actionsare code excerpts from larger programs and must be run in context. While actions\n    show you how to call individual service functions, you can see actions in context in their related scenarios.",
              "Scenariosare code examples that show you how to accomplish specific tasks by\n    calling multiple functions within a service or combined with other AWS services.",
              "For a complete list of AWS SDK developer guides and code examples, seeUsing Lambda with an AWS SDK.\n    This topic also includes information about getting started and details about previous SDK versions.",
              "Get started",
              "The following code examples show how to get started using Lambda.",
              "There's more on GitHub. Find the complete example and learn how to set up and run in theAWS Code\n            Examples Repository.",
              "For API details, seeListFunctionsinAWS SDK for .NET API Reference.",
              "There's more on GitHub. Find the complete example and learn how to set up and run in theAWS Code\n            Examples Repository.",
              "Code for the CMakeLists.txt CMake file.",
              "Code for the hello_lambda.cpp source file.",
              "For API details, seeListFunctionsinAWS SDK for C++ API Reference.",
              "There's more on GitHub. Find the complete example and learn how to set up and run in theAWS Code\n            Examples Repository.",
              "For API details, seeListFunctionsinAWS SDK for Go API Reference.",
              "There's more on GitHub. Find the complete example and learn how to set up and run in theAWS Code\n            Examples Repository.",
              "For API details, seeListFunctionsinAWS SDK for Java 2.x API Reference.",
              "There's more on GitHub. Find the complete example and learn how to set up and run in theAWS Code\n            Examples Repository.",
              "For API details, seeListFunctionsinAWS SDK for JavaScript API Reference.",
              "There's more on GitHub. Find the complete example and learn how to set up and run in theAWS Code\n            Examples Repository.",
              "For API details, seeListFunctionsinAWS SDK for Python (Boto3) API Reference.",
              "There's more on GitHub. Find the complete example and learn how to set up and run in theAWS Code\n            Examples Repository.",
              "For API details, seeListFunctionsinAWS SDK for Ruby API Reference."
            ]
          }
        ]
      }
    ]
  }
]